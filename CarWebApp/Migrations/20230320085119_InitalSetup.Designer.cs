// <auto-generated />
using System;
using CarWebApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarWebApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230320085119_InitalSetup")]
    partial class InitalSetup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarWebApp.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tn")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CarWebApp.Models.BrandSpr", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Cd")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EditedByUserId");

                    b.ToTable("BrandSpr");
                });

            modelBuilder.Entity("CarWebApp.Models.DriverSpr", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Tn")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EditedByUserId");

                    b.ToTable("DriverSpr");
                });

            modelBuilder.Entity("CarWebApp.Models.FuelSpr", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Cd")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EditedByUserId");

                    b.ToTable("FuelSpr");
                });

            modelBuilder.Entity("CarWebApp.Models.ModelSpr", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("BrandSprId")
                        .HasColumnType("int");

                    b.Property<int>("Cd")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("FuelSprId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BrandSprId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EditedByUserId");

                    b.HasIndex("FuelSprId");

                    b.ToTable("ModelSpr");
                });

            modelBuilder.Entity("CarWebApp.Models.VehicleSpr", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("DriverSprId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("GarNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ModelSprId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Norm")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric");

                    b.Property<string>("RegNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DriverSprId");

                    b.HasIndex("EditedByUserId");

                    b.HasIndex("ModelSprId");

                    b.ToTable("VehicleSpr");
                });

            modelBuilder.Entity("CarWebApp.Models.WayBill", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("Cd")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("DriverSprId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DtGive")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DtIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DtOut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DtReturn")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("FuelBalIn")
                        .HasPrecision(6, 2)
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FuelBalOut")
                        .HasPrecision(6, 2)
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FuelConsumFact")
                        .HasPrecision(6, 2)
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FuelConsumNorm")
                        .HasPrecision(6, 2)
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FuelFillUp")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<int?>("FuelSprId")
                        .HasColumnType("int");

                    b.Property<int?>("SpdIn")
                        .HasColumnType("int");

                    b.Property<int?>("SpdOut")
                        .HasColumnType("int");

                    b.Property<int?>("VehicleSprId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DriverSprId");

                    b.HasIndex("EditedByUserId");

                    b.HasIndex("FuelSprId");

                    b.HasIndex("VehicleSprId");

                    b.ToTable("WayBill");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CarWebApp.Models.BrandSpr", b =>
                {
                    b.HasOne("CarWebApp.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarWebApp.Models.ApplicationUser", "EditedByUser")
                        .WithMany()
                        .HasForeignKey("EditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("EditedByUser");
                });

            modelBuilder.Entity("CarWebApp.Models.DriverSpr", b =>
                {
                    b.HasOne("CarWebApp.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarWebApp.Models.ApplicationUser", "EditedByUser")
                        .WithMany()
                        .HasForeignKey("EditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("EditedByUser");
                });

            modelBuilder.Entity("CarWebApp.Models.FuelSpr", b =>
                {
                    b.HasOne("CarWebApp.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarWebApp.Models.ApplicationUser", "EditedByUser")
                        .WithMany()
                        .HasForeignKey("EditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("EditedByUser");
                });

            modelBuilder.Entity("CarWebApp.Models.ModelSpr", b =>
                {
                    b.HasOne("CarWebApp.Models.BrandSpr", "BrandSpr")
                        .WithMany("ModelSprs")
                        .HasForeignKey("BrandSprId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CarWebApp.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarWebApp.Models.ApplicationUser", "EditedByUser")
                        .WithMany()
                        .HasForeignKey("EditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CarWebApp.Models.FuelSpr", "FuelSpr")
                        .WithMany("ModelSprs")
                        .HasForeignKey("FuelSprId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BrandSpr");

                    b.Navigation("CreatedByUser");

                    b.Navigation("EditedByUser");

                    b.Navigation("FuelSpr");
                });

            modelBuilder.Entity("CarWebApp.Models.VehicleSpr", b =>
                {
                    b.HasOne("CarWebApp.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarWebApp.Models.DriverSpr", "DriverSpr")
                        .WithMany("VehicleSprs")
                        .HasForeignKey("DriverSprId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CarWebApp.Models.ApplicationUser", "EditedByUser")
                        .WithMany()
                        .HasForeignKey("EditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CarWebApp.Models.ModelSpr", "ModelSpr")
                        .WithMany("VehicleSprs")
                        .HasForeignKey("ModelSprId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("DriverSpr");

                    b.Navigation("EditedByUser");

                    b.Navigation("ModelSpr");
                });

            modelBuilder.Entity("CarWebApp.Models.WayBill", b =>
                {
                    b.HasOne("CarWebApp.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarWebApp.Models.DriverSpr", "DriverSpr")
                        .WithMany("WayBills")
                        .HasForeignKey("DriverSprId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CarWebApp.Models.ApplicationUser", "EditedByUser")
                        .WithMany()
                        .HasForeignKey("EditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CarWebApp.Models.FuelSpr", "FuelSpr")
                        .WithMany("WayBills")
                        .HasForeignKey("FuelSprId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CarWebApp.Models.VehicleSpr", "VehicleSpr")
                        .WithMany("WayBills")
                        .HasForeignKey("VehicleSprId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("DriverSpr");

                    b.Navigation("EditedByUser");

                    b.Navigation("FuelSpr");

                    b.Navigation("VehicleSpr");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CarWebApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CarWebApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarWebApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CarWebApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CarWebApp.Models.BrandSpr", b =>
                {
                    b.Navigation("ModelSprs");
                });

            modelBuilder.Entity("CarWebApp.Models.DriverSpr", b =>
                {
                    b.Navigation("VehicleSprs");

                    b.Navigation("WayBills");
                });

            modelBuilder.Entity("CarWebApp.Models.FuelSpr", b =>
                {
                    b.Navigation("ModelSprs");

                    b.Navigation("WayBills");
                });

            modelBuilder.Entity("CarWebApp.Models.ModelSpr", b =>
                {
                    b.Navigation("VehicleSprs");
                });

            modelBuilder.Entity("CarWebApp.Models.VehicleSpr", b =>
                {
                    b.Navigation("WayBills");
                });
#pragma warning restore 612, 618
        }
    }
}
